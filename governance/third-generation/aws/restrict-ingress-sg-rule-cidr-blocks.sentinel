# This policy uses the Sentinel tfplan/v2 import to validate that no security group
# rules have the CIDR "0.0.0.0/0" for ingress rules.  It covers both the
# aws_security_group and the aws_security_group_rule resources which can both
# define rules.

# Import the tfplan/v2 import, but use the alias "tfplan"
import "tfplan/v2" as tfplan

# Import common-functions/tfplan-functions/tfplan-functions.sentinel
# with alias "plan"
import "tfplan-functions" as plan

# Import for looping through the Security Group Rules
import "types"

# Forbidden CIDRs
# Include "null" to forbid missing or computed values
forbidden_cidrs = ["0.0.0.0/0"]

# Get all Security Group Ingress Rules
SGIngressRules = filter tfplan.resource_changes as address, rc {
  rc.type is "aws_security_group_rule" and
  rc.mode is "managed" and rc.change.after.type is "ingress" and
  (rc.change.actions contains "create" or rc.change.actions contains "update" or
   rc.change.actions contains "read" or rc.change.actions contains "no-op")
}

# Validate Security Group Rules
violatingSGRulesCount = 0
for SGIngressRules as address, sgr {

	# Validate that each SG rule does not have disallowed value
	# Since cidr_blocks is optional and could be computed,
	# We check that it is present and really a list
	# before checking whether it contains "0.0.0.0/0"
	if sgr.change.after.cidr_blocks else null is not null and
		types.type_of(sgr.change.after.cidr_blocks) is "list" and
		sgr.change.after.cidr_blocks contains "0.0.0.0/0"{
		violatingSGRulesCount += 1
		print("SG Rule Ingress Violation:", address, "has at least one ingress", 
				"rule with forbidden cidr blocks")
		print("  Ingress Rule", "has cidr_blocks", sgr.change.after.cidr_blocks, 
				"that has items from the forbidden list:", forbidden_cidrs)
  }
} // end of SG Rules

# Get all Security Groups
allSGs = plan.find_resources("aws_security_group")

# Validate Security Groups
violatingSGsCount = 0
for allSGs as address, sg {

  # Find the ingress rules of the current SG
  ingressRules = plan.find_blocks(sg, "ingress")

  # Filter to violating CIDR blocks
  # Warnings will not be printed for violations since the last parameter is false
  violatingIRs = plan.filter_attribute_contains_items_from_list(ingressRules,
                 "cidr_blocks", forbidden_cidrs, false)

  # Print violation messages
  if length(violatingIRs["messages"]) > 0 {
    violatingSGsCount += 1
    print("SG Ingress Violation:", address, "has at least one ingress rule",
          "with forbidden cidr blocks")
    plan.print_violations(violatingIRs["messages"], "  Ingress Rule")
  }  // end if

} // end for SGs

# Main rule
validated = violatingSGsCount is 0 and violatingSGRulesCount is 0
main = rule {
  validated is true
}
